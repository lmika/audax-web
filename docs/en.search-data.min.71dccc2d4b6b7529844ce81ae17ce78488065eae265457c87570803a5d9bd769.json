[{"id":0,"href":"/docs/","title":"Docs","section":"Dynamo-Browse","content":" User Guide # Table Of Contents # Launching and Quitting Selecting a Table Selecting a Workspace Quitting Getting Around The Back-stack Adjusting The Layout Adjusting The Displayed Columns Entering Commands Filtering and Querying Filtering Querying Editing Items Marking Items Modifying Attributes Deleting Attributes Adding Items Deleting Items Committing Changes Backing Out of Changes Customising Dynamo-Browse The RC File Rebinding Keys References\nKey Bindings Commands Query Expressions Launch Flags Settings "},{"id":1,"href":"/docs/customising/","title":"Customising","section":"Docs","content":" Customising Dynamo-Browse # Some commands can be used to customise Dynamo-Browse, such as modify key bindings. The effect of these commands will only be applied for the duration of the session: they are currently not tracked within the workspace file. So in order to keep customisations across relaunches, these commands can be added to an RC file.\nThe RC File # The RC file is a text file containing commands that will be executed by Dynamo-Browse upon launch. By default, the RC file is located at the following path:\n$HOME/.config/audax/dynamo-browse/init.rc This file is primarily intended for commands that customise Dynamo-Browse in a particular way, but any command can be entered here. If this file is found, Dynamo-Browse will invoke each command before loading or prompting the table.\nRebinding Keys # The default key bindings of Dynamo-Browse can be changed using the rebind command. This takes a binding name corresponding to the particular action to invoke, and the key to which it should be mapped to.\nPutting these commands in the RC file will effectively change the default bindings of Dynamo-Browse.\n# Rebind T to prompt for a table rebind \u0026#34;view.prompt-for-table\u0026#34; \u0026#34;T\u0026#34; # Rebind escape to prompt for a command rebind \u0026#34;view.prompt-for-command\u0026#34; \u0026#34;esc\u0026#34; At the moment each binding name can only be mapped to a single key. It\u0026rsquo;s also currently not possible to setup bindings for commands. These may be supported in the future.\nA list of available binding names can be found the the reference (check the \u0026ldquo;Show binding names\u0026rdquo; checkbox). Note that some bindings may not have default key bindings.\n"},{"id":2,"href":"/docs/editing-items/","title":"Editing Items","section":"Docs","content":" Editing Items # Dynamo-Browse offers some basic facilities for editing items — such as creating items, deleting items, and modifying their attribute values.\nMarking Items # Most modifications are applied to items that are marked. A marked item is indicated by a grey background and a bullet indicator (•) on the left side of the table.\nTo mark or unmark the selected item, press m.\nThe command unmark can be used to clear all marked items.\nModifying Attributes # Item attributes can be added or modified by using the command set-attr or the alias sa. This command can be used to modify the value and type of an attribute of the currently selected items, or from any marked items.\nThe format of the command is as follows:\n:set-attr [\u0026lt;type\u0026gt;] \u0026lt;attributeName\u0026gt; Where type is one of the following (case insensitive):\n-S: string -N: number -BOOL: boolean -NULL: null If the type is not specified, and the attribute exists, then the attribute type will not change. The type must be specified if this is a new attribute or multiple items have been marked. After executing the command, Dynamo-Browse will prompt for the value of the new attribute if one is required.\nModified attributes will only be tracked in memory: they will not be written to the actual table until it is \u0026ldquo;putted\u0026rdquo; (see Committing Changes). An item that has been modified will be displayed in red and a modified indicator (M) will appear on the left-most column.\nDeleting Attributes # An attribute can be deleted by using the command del-attr or the alias da. The format of the command is as follows:\n:del-attr \u0026lt;attributeName\u0026gt; When executed, the attribute with the name attributeName will be deleted from the selected item, or from any marked items.\nDeleted attributes will only be tracked in memory: they will not be removed from the actual table until it is \u0026ldquo;putted\u0026rdquo; (see Committing Changes). An item that has been modified will be displayed in red and a modified indicator (M) will appear on the left-most column.\nAdding Items # A new item can be created by typing in the command new-item.\nWhen entered, Dynamo-Browse will prompt for the partition and sort key. Once these are entered, the item will appear in the top pane in green with an asterisk indicator (*) on the left left-most column. Any additional attributes can be set by using set-attr.\nA new item will only appear in memory: it will not be written to the actual table until it is \u0026ldquo;putted\u0026rdquo; (see Committing Changes).\nDeleting Items # Items can be deleted by marking them and then typing in the command delete.\nUnlike most of the other modified commands, running delete WILL make changes to the table immediately.\nCommitting Changes # New or modified items (but not deleted items) will be kept in memory until they are committed or \u0026ldquo;putted\u0026rdquo; to the table. To put the changes, use the put command or w alias.\nBacking Out of Changes # Any modified items can be reverted back to what they are in the actual table by rerunning the current query. This can be done by pressing ⇧R.\n"},{"id":3,"href":"/docs/filtering-querying/","title":"Filtering Querying","section":"Docs","content":" Querying And Viewing Results # Querying # A query or scan over the table can be performed by entering a Query Expression. Query expressions are a built-in expression language which translates to either a DynamoDB query or scan, depending on the expression. Details about the Query Expression language can be found in the Query Expressions references.\nTo run a query, press ?, and enter the query expression.\nTo clear a query, press ?, and press Enter without entering any value.\nWhile the query is running, a spinner indicating activity will be shown in the status bar. A running query can be cancelled while this spinner is visible by pressing ^C. You have the option to view any partial results that have been retrieved at the time.\nFiltering # The displayed items of the current result-set can be filtered down to those that contain a specific substring.\nTo set the filter, press /, and enter the substring you wish to filter on.\nTo clear the filter, press /, and press Enter without entering any value.\nWhen a filter is set, any item that does not have a top-level attribute containing the substring will be hidden.\nFiltering will only consist the items that are in the current result-set. It will not result in a call to the actual table itself.\nNote that filtering is case sensitive.\n"},{"id":4,"href":"/docs/getting-around/","title":"Getting Around","section":"Docs","content":" Getting Around # After selecting a table, Dynamo-Browse will perform a scan and present the results in the default view mode.\nThis mode consists of three panes:\nThe top pane displays the result-set of the last scan or query. The table name is at the top-left. The middle pane displays the attributes of the currently selected item, along with their type. The bottom pane displays the current query or filter, plus any messages. Prompts for input will also appear at the bottom. The result-set is sorted in ascending order based on the value and type of the partition and sort key. Up to 1,000 rows will be displayed for the current result-set.\nSince DynamoDB does not require all items to have the same attribute (unless they are pre-defined), any attribute not set for a column is indicated with a grey tilde character ~.\nUse the following keys to change the currently selected row, which is highlighted in purple:\n↑/i: Move selection up ↓/k: Move selection down PgUp/⇧I: Page up PgDn/⇧K: Page down Home/0: First row End/$: Last row The columns of the table consist of the top-level attributes of the result-set. The partition key, sort key, plus any explicitly defined attributes will always be displayed from the left margin onwards. The other attributes are determined from the results of the last scan or query, and may change depending on the result.\nThe display columns of the table can be scrolled across by using the following keys:\n←/j: Scroll to the left →/l: Scroll to the right The attributes of the currently selected item will appear in the middle pane. Both the type and the value of each attribute will be displayed. Any nested attributes will be indented, and will below their parent item. A value displayed in grey does not represent the actual value of the item, but indicates some meta-information about the item, such as the length.\nThe Back-stack # Changes to the view of Dynamo-Browse will be maintained in back-stack, similar to how a web-browse keeps track of the webpages you\u0026rsquo;ve visited. This stack will record the currently viewed table, filter, or query, allowing you to \u0026ldquo;go back\u0026rdquo; to a previous view by pressing Backspace. Pressing \\ will allow you to go forward through the stack.\nThe back-stack is preserved in the workspace file, and can be restored by launching Dynamo-Browse with the -w switch. Launching Dynamo-Browse with a workspace that has a non-empty stack will restore the last viewed table, filter, or query from the session that was previously using the workspace.\nNote: the back-stack does not preserve the actual items in the workspace. Going backwards or forwards through the back-stack will execute any queries or filters against the actual table itself. Adjusting The Layout # The horizontal size of the item table and currently selected item pane can be changed to one of the following layout configurations:\nItem view taking up 14 rows on the bottom with the table pane taking up the rest of the vertical space (the default) Item view and table view taking up half of the available space Table view taking up 7 rows on the top with the item view taking up the rest of the vertical space Table view hidden Item view hidden Pressing w will cycle forward though these layouts. For example, while in the default layout, pressing w will switch to the second layout, where both the table view take up half the screen. Pressing ⇧W will cycle through the layouts in the reverse order.\nAdjusting The Displayed Columns # The columns of the result-set can be adjusted by opening up the Fields Popup. This popup can be opened by pressing f.\nWhile this popup is opened, the following changes can be applied to the displayed columns of the main table:\nColumns can be hidden The order columns appear in the main table can be rearranged New columns can be added The popup will display the list of columns of the main result-set table. Pressing ↑/i or ↓/k will move the selection indicator to the column to apply the operation. Pressing ←/j or →/l will scroll the main table left or right so that any operations can be previewed.\nTo reset the columns to the top-level fields of the current result set, press ⇧R.\nTo close the popup, press Escape.\nShowing And Hiding Columns # In the Fields Popup, each row has a symbol indicating whether the row is currently visible (.) or hidden (✕). Pressing Space will toggle whether the currently selected column is shown or hidden.\nRe-arranging The Order Of Columns # The currently selected row can be moved up or down the table. This will move the corresponding column in the main table either left or right.\nPress ⇧I to the selected row up, which will move the corresponding column left.\nPress ⇧K to the selected row down, which will move the corresponding column right.\nAdding And Removing Columns # New columns can be added in the table. The value of these columns will be determined by the result of a query expression, and can be used to expose fields that are not at the top level.\nAny nested fields of maps or lists will not be included as a column by default. Consider, for example, a table of books with authors structured as so:\n{ \u0026#34;book\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;The Lord Of The Rings\u0026#34;}, \u0026#34;author\u0026#34;: {\u0026#34;M\u0026#34;: { \u0026#34;firstName\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;John\u0026#34;}, \u0026#34;middleName\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;Ronald Reuel\u0026#34;}, \u0026#34;lastName\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;Tolkien\u0026#34;}, }} } If you wanted to show the the author\u0026rsquo;s first and last name in the main table, rather than just see the description (3 items), you can add a new column with an expression selecting the fields of the author map. The expressions that can be used here are as follows:\nFirst name: author.firstName Last name: author.lastName This can be extended to expressions that perform comparisons or operations. For example, the expression author.firstName ^= \u0026quot;J\u0026quot; can be use in a new column to display True for any first name that begins with a J.\nTo add a new column, press a while the Fields Popup is visible. You\u0026rsquo;ll be prompted to enter a query expression, which will be evaluated over each row within the result-set when displaying the table.\nAny column, that was either retrieved from the result-set or added by the user, can be deleted by selecting the column within the Fields Popup and pressing d.\nEntering Commands # Commands can be entered by pressing : and entering the command, with any arguments, at the prompt.\nThe list of available commands can be found within the reference section.\n"},{"id":5,"href":"/docs/launching/","title":"Launching","section":"Docs","content":" Launching And Quitting # To launch Dynamo-Browse, run the following command at the terminal:\ndynamo-browse This will use your current AWS configuration and region, which can be changed by setting the relevant AWS_ environment variables.\nTo connect to a local instance of DynamoDB, such as one running in a Docker container, use the --local flag. This takes as the argument the hostname and endpoint of the local DynamoDB server. The hostname can be omitted, and will default to localhost:\ndynamo-browse --local :8080 Selecting a Table # Upon launch, Dynamo-Browse will present a list of all the tables within the region:\nSelect the table to view by pressing Enter. Use the following keys to navigate the items within the list:\n↑/i: Move selection up ↓/k: Move selection down Once the table is selected, the table will be scanned and Dynamo-Browse will be presented in View Mode. Another table can be selected from within view mode using the :table command.\nDynamo-Browse can also be launched directly in view mode by specifying a table using the -t flag:\ndynamo-browse -t user-accounts Selecting a Workspace # Dynamo-Browse tracks session state, such as the back-stack, in a workspace file. By default the workspace file will be a new file created within the temporary directory, but a specific workspace filename can be specified by using the -w flag:\ndynamo-browse -w my-workspace.ws If the workspace filename references an existing file, Dynamo-Browse will restore the workspace and use it for the duration of the session. If the workspace filename references a non-existing file, Dynamo-Browse will initialise a new workspace using the specified filename.\nOnly one running instance of Dynamo-Browse can use a single workspace file at any one time.\nQuitting # To quit dynamodb-browse, enter the command q by pressing :, then typing q Enter. The keystroke Ctrl+C can also be used to quit.\n"},{"id":6,"href":"/docs/reference/commands/","title":"Commands","section":"Docs","content":" Commands # clone # :clone Copies the currently selected item to a new item, which will appear at the bottom of the table.\nCloning an item will prompt for a new partition key and sort key but will not check for duplicates.\ndel-attr # :del-attr \u0026lt;attribute\u0026gt; Alias: da\nDeletes attribute from the currently selected item; or if there are any marked items, the marked items.\ndelete # :delete Deletes the marked items. Unlike the other commands that modify items, this command will be executed on the table straight away.\necho # :echo [message ...] Displays message in the status bar. Mainly used for debugging.\nexport # :export [-all] \u0026lt;filename\u0026gt; Writes the currently loaded items as a CSV file to filename.\nOnly string, numerical, and boolean values will be written to the export; all other value types will be black. Exporting will honour the columns currently visible in the table. Filtered items will also be included in the exported file.\nWhen called with the -all flag, any subsequent pages will be included in the export. If invoked after running a query, all items returned from that query will be exported to file.\nmark # :mark [all | none | toggle] [-where \u0026lt;expr\u0026gt;] Mark the rows in the following way:\nall: will mark all rows. This is the default when invoked without an argument. none: will unmark all rows. toggle: will toggle all marked and unmarked rows. Adding the -where option would only select rows that match the given query expression.\nnew-item # :new-item Creates a new item. When executed, the value for the partition key and sort key will be prompted. The new item will not be written to the table until it is committed with the put command.\nput # :put Alias: w\nCommits all new and modified items to the table.\nquit # :quit Alias: q\nQuits Dynamo-Browse.\nrebind # :rebind \u0026lt;bindingName\u0026gt; \u0026lt;key\u0026gt; Rebinds the action with bindingName to key. This will replace any existing binding for that action. See Key Bindings with \u0026ldquo;Show binding names\u0026rdquo; checked to see available binding names.\nset # :set \u0026lt;name\u0026gt; [value] Set the value of a setting. Flag setting types can be enabled without any value. See Settings for possible setting values.\nset-attr # :set-attr [type] \u0026lt;attributeName\u0026gt; Alias: sa\nModifies the value of attribute of the currently selected item; or if there are any marked items, the marked items.\nThe value of type can be use to specify the type of the attribute. It can be one of the following (case insensitive):\n-S: string value -N: number value -BOOL: boolean value -NULL: null value -TO: value of an expression If unset, the attribute type will not be changed. type must be set if multiple items have been marked.\ntable # :table Select the table to display.\nunmark # :unmark Unmark all marked items. This is essentially an alias for mark none.\n"},{"id":7,"href":"/docs/reference/key-bindings/","title":"Key Bindings","section":"Docs","content":" Key Bindings # Show binding names Key Binding Name Action Main View Mode \u0026uarr;/i table.move-up Move selection up \u0026darr;/k table.move-down Move selection down PgUp/\u0026#8679;I table.page-up Page up PgDn/\u0026#8679;K table.page-down Page down Home/0 table.goto-top Move selection to first item End/$ table.goto-bottom Move selection to last item \u0026larr;/j table.move-left Scroll displayed columns left \u0026rarr;/l table.move-right Scroll displayed columns right Backspace view.view-back Go back \\ view.view-forward Go forward w view.cycle-layout-forward Cycle forward through layout \u0026#8679;W view.cycle-layout-backwards Cycle backwards through layout m view.mark Mark/unmark currently selected item M view.toggle-marked-items Toggle marked/unmarked items c view.copy-item-to-clipboard Copy displayed item to pasteboard C view.copy-table-to-clipboard Copy displayed table to pasteboard as a CSV / view.prompt-for-filter Filter ? view.prompt-for-query Run scan/query view.prompt-for-table Select table R view.rescan Rerun last scan/query \u0026gt; view.fetch-next-page Fetch the next page of results : view.prompt-for-command Enter command f view.show-fields-popup Show fields popup ^C view.cancel-running-job Cancel running operation ^C/Esc view.quit Quit Field Popup Mode \u0026#8679;I fields-popup.shift-column-left Shift selected column left \u0026#8679;K fields-popup.shift-column-right Shift selected column right Space fields-popup.toggle-column-visible Toggle selected column visible a fields-popup.add-column Add new column d fields-popup.delete-column Delete selected column \u0026#8679;R fields-popup.reset-columns Reset columns to that of the result-set ^C/Esc fields-popup.close Close field popup "},{"id":8,"href":"/docs/reference/launch-flags/","title":"Launch Flags","section":"Docs","content":" Launch Flags # -debug # -debug \u0026lt;filename\u0026gt; Enable debug logs, which will be written to filename.\n-default-limit # -default-limit \u0026lt;int\u0026gt; Sets the default limit of queries or scans. The default is 1,000 items.\n-local # -local [host]:\u0026lt;port\u0026gt; Connect to a local DynamoDB service listening on host:port. The default host is localhost.\n-ro # -ro Enable read-only mode.\n-t # -t \u0026lt;tableName\u0026gt; Open the table tableName, instead of prompting for a table.\n-w # -w \u0026lt;workspaceFile\u0026gt; Use workspaceFile as the workspace file. If unset, a temporary file will be used for the workspace.\n"},{"id":9,"href":"/docs/reference/query-expressions/","title":"Query Expressions","section":"Docs","content":" Query Expression # Query expressions are used to select rows of a table. When executed as a query (i.e. by pressing ?), they will be translated into query or table scans that will run over the DynamoDB table in AWS. They work similar to the \u0026ldquo;where\u0026rdquo; clause in PartiQL except that they only require Query and Scan permission on the AWS table and do not require \u0026ldquo;select\u0026rdquo; clauses. Such expressions can also be used in other areas of Dynamo-Browse, such as populating the value of new columns.\nNames And Values # A query expressions support the following literals:\nStrings: \u0026quot;Hello\u0026quot; Integers: 123 Boolean: true or false Field names are represented as regular identifiers, such as pk or address.\nEquality # To select rows with a field that equals a given value, use the = operator:\npk = \u0026#34;something\u0026#34; Either operand will can be an identifier, placeholder, or value that resolves to any type. The result will be true if both the LHS and RHS equal the same type and value. If the types differ or the values differ, the result will be false. The field types can be different, but will always produce false.\nThe compliment is the != operator:\npk != \u0026#34;not this\u0026#34; Numerical Comparison # The operands \u0026lt;, \u0026lt;=, \u0026gt;, \u0026gt;= can be used to compare numerical fields and values:\nthree \u0026lt; 5 // true three \u0026lt;= 3 // true three \u0026gt; 12 // false three \u0026gt;= 1 // true To verify that a number exists within a range, use the between operand:\nthree between 1 and 5 // true Prefix Operator # To select rows with a field that starts with a given substring, use the ^= operator:\npk ^= \u0026#34;some\u0026#34; This is equivalent to using the begins_with function in AWS query expressions.\nLogical Operators # The logical operators and, or and not can be used to express conjunctions, disjunctions and logical negation between multiple expressions:\npk = \u0026#34;this\u0026#34; and sk = \u0026#34;that\u0026#34; pk != \u0026#34;that\u0026#34; and count \u0026gt; 123 not count = 21 The order of precedence of these operators, from lowest to highest, is or, and, then not. This differs from AWS, in which all operators have the same precedence. For example, the query:\npk=\u0026#34;this\u0026#34; or pk=\u0026#34;that\u0026#34; and sk=\u0026#34;foo\u0026#34; is equivalent to:\npk=\u0026#34;this\u0026#34; or (pk=\u0026#34;that\u0026#34; and sk=\u0026#34;foo\u0026#34;) The order can be overridden using brackets:\n(pk=\u0026#34;this\u0026#34; or pk=\u0026#34;that\u0026#34;) and sk=\u0026#34;foo\u0026#34; If a query expression is of the form pk = \u0026lt;val\u0026gt; or pk = \u0026lt;val\u0026gt; and sk \u0026lt;op\u0026gt; \u0026lt;val\u0026gt;, where:\npk and sk are the partition and sort keys of the base table or a GSI, val resolves to a constant value, and, op is either =, ^=, \u0026lt;, \u0026lt;=, \u0026gt;, \u0026gt;=, or between the expression will be executed as a Query call. Unlike expressions on the AWS Query API method itself, the order of the pk and sk subexpressions can be swapped.\nOther expressions are supported but they will be executed as a table Scan.\nThe in Operator # The in operator can be used to determine if a value exists in a collection:\nthree in (1, 2, 3, 4, 5) name in (\u0026#34;Tom\u0026#34;, \u0026#34;Dick\u0026#34;, \u0026#34;Harry\u0026#34;) The result will be a boolean, which will be true if the value of the LHS equals any of the items within the RHS.\nThe collection can be one or more fixed set of values within parenthesis separated by commas. A single value present within parenthesis is equivalent to the equality test:\nthree in (3) // equivalent to: three = 3 The right hand side can also be a subexpression without parenthesis that will resolve to either a string, list or map. The operand will behave differently based on the RHS type:\nIf the RHS is a string, the result will be true if the LHS is a substring of the RHS (equivalent to the contains AWS conditional expressions function) If the RHS is a list, the result will be true if the LHS equals any of the items of the list If the RHS is a map, the result will be true if the LHS appears as a key of the map The compliment operand is not in:\nthree not in (6, 7, 8, 9) The is Operator # The is operator can be used to assert the value type. The RHS operand is a string which is to represent an AWS DynamoDB item attribute type, for example S for strings, N for numbers, etc.\n\u0026#34;hello\u0026#34; is \u0026#34;S\u0026#34; // true 123 is \u0026#34;N\u0026#34; // true \u0026#34;hello\u0026#34; is \u0026#34;N\u0026#34; // false This is equivalent to the attribute_type AWS conditional expressions function.\nThe special value any can be used to check that a field is set, regardless of type:\npk is \u0026#34;any\u0026#34; // true This is equivalent to the attribute_exists AWS conditional expressions function.\nThe compliment operand is not is. Using it with the \u0026ldquo;any\u0026rdquo; special value (not is \u0026quot;any\u0026quot;) is equivalent to the attribute_not_exists AWS conditional expressions function.\nThe using Options # A query that is to be executed on the actual table in AWS will go though a short planning phase to determine whether it\u0026rsquo;s possible to invoke the expression as a Query call. If the attributes map to partition and sort keys of either the main table, or exactly one GSI associated with the table, the expression will be executed as a Query over the table or the GSI found with those attributes.\nIn cases where multiple GSI candidates exist on the base table, the query will fail with the following error:\nmultiple plans with index found. Specify index or scan with \u0026#39;using\u0026#39; clause In these cases, the index will need to be specified with the using keyword with the index option:\naddress=\u0026#34;something\u0026#34; using index(\u0026#34;specific-gsi-name\u0026#34;) The using keyword can also be used to force the expression to run as a table scan, even if the query can be invoked using a Query call over the base table or GSI:\naddress=\u0026#34;something\u0026#34; using scan Builtin Functions # Query expressions support a number of builtin functions.\nThe marked function # marked(fieldname) The marked function will return a list of field values of all marked rows of the current result set. The items will appear in the list as they appear in the result set. The fieldname currently only supports top-level fields. If no fields are marked, the empty list is returned.\nmarked(\u0026#34;city\u0026#34;) The range function # range(from, to) The range function will return a list of integers between from and to inclusive. Non integers will be truncated to integers, and the step is always be 1.\nrange(2, 5) // [2, 3, 4, 5] three in range(2, 5) // true The size function # size(v) The size function will return the number of items of a list or map, or the length of a string.\nThe size function is equivalent to the size AWS conditional expressions function, and as such is the only function that is included as is in the generated Query or Scan expression. All other functions are evaluated prior to making the Query or Scan AWS call. Placeholders # In some circumstances, such as the session.query method, it\u0026rsquo;s possible to use a placeholder as a field or value. To expand a placeholder to an identifier, use the : prefix. To expanded the placeholder as a value, use the $ prefix. For example, the expression :key = $value in the following script:\nout := session.query(\u0026#34;:key = $value\u0026#34;, { table: \u0026#34;some-table\u0026#34;, args: { key: \u0026#34;pk\u0026#34;, value: \u0026#34;value\u0026#34; } } Is equivalent to the query pk = \u0026quot;hello\u0026quot;, as the placeholder :key is expanded to an identifier and $value is expanded to a value, in this case a string.\n"},{"id":10,"href":"/docs/reference/settings/","title":"Settings","section":"Docs","content":" Settings # default-limit # Type: int Default: 1000 The maximum number of rows returned from a query or scan.\nro # Type: flag Enable read-only mode. When enabled, all modification operations are disabled, and will fail with a Read-only mode error. The rw setting will disable read-only mode.\nrw # Type: flag Disable read-only mode. The ro setting will enable read-only mode.\n"},{"id":11,"href":"/download/","title":"Download","section":"Dynamo-Browse","content":" Download # Binary packages can be download from GitHub.\nMacOS Using Homebrew # If you have Homebrew, you can install using the following command:\nbrew tap lmika/audax brew install audax Linux # To install the Debian package, download the .deb file, and install the package by running:\nsudo apt install ./audax_0.4.0_linux_amd64.deb To install the RPM package, download the .rpm file, and install the package by running:\nsudo yum install ./audax_0.4.0_linux_amd64.rpm Install Using Go # If you have Go 1.22, you can install using the following command:\ngo install github.com/lmika/audax/cmd/dynamo-browse@v0.4.0 The source code can be found on GitHub.\n"},{"id":12,"href":"/docs/reference/script-api/","title":"Script API","section":"Docs","content":" Script API # "},{"id":13,"href":"/docs/scripting/","title":"Scripting","section":"Docs","content":" Scripting # Scripts can be used to automate certain tasks with Dynamo-Browse. They can also be used to define new commands or key bindings.\nScripting Basics # Dynamo-Browse scripts are written using the Tamarin scripting language, which looks a lot like Go. All features of the language are available in Dynamo-Browse.\nThe typical \u0026ldquo;hello world\u0026rdquo; script for Dynamo-Browse is below:\nui.print(\u0026#34;Hello, world\u0026#34;) This uses the ui package, which is the package used to interact with the Dynamo-Browse user interface. A full list of supported packages can be found in the Script API reference, along with the builtins and packages supported by Tamarin itself.\nNote: the ext package is only available to Extension Scripts. To execute this script, use the run-script command:\nrun-script /path/to/script/hello.tm You\u0026rsquo;ll see that the message \u0026ldquo;Hello, world\u0026rdquo; will appear in the status bar of Dynamo-Browse.\nAny print or printf messages will be written to the debug log with the prefix script \u0026lt;filename\u0026gt;. The debug log is turned off by default, but it can be enabled using the -debug flag on launch.\nScripts loaded using the run-script command are for ad-hoc automation tasks that are not necessarily designed for repeated use. These ad-hoc scripts are executed, then immediately unloaded, and are not generally allowed to extend Dynamo-Browse. In order to do so, you will need to write an Extension Script.\nExtension Scripts # Extension scripts are scripts designed to extend Dynamo-Browse in some way, such as with new commands or key bindings. They are traditionally loaded on startup and exist in the predefined \u0026ldquo;script\u0026rdquo; directory. They are usually designed for repeated operations, including those that can be bound to command name or keys.\nThe following is an example script which will define a \u0026ldquo;goto\u0026rdquo; command. When invoked, the script will prompt the user for the value of the partition key. It will then perform a query over the currently viewed table for any rows with that partition key. If no error occurred, the results of the query will be shown to the user.\n// Define a new \u0026#34;goto\u0026#34; command, which can be invoked when the user presses \u0026#39;:\u0026#39; and types in \u0026#39;goto\u0026#39; ext.command(\u0026#34;goto\u0026#34;, func() { // Use the information of the current table to get the name of the partition key. pkName := session.current_table().keys[\u0026#34;partition\u0026#34;] // Prompt the user for the value to go to. The user can press Esc, which will cancel // the input and return \u0026#39;nil\u0026#39;. keyVal := ui.prompt(pkName + \u0026#34;? \u0026#34;) if keyVal == nil { return nil } // Run a query over the DynamoDB table for any rows with the partition key. Notice // the use of the \u0026#39;args\u0026#39; option, and the presence of both the name prefix (\u0026#39;:key\u0026#39;) // and value prefix (\u0026#39;$val\u0026#39;). res := session.query(\u0026#34;:key = $val\u0026#34;, { args: { key: pkName, val: keyVal, }, }) // The query method will return either an error or a result. If it\u0026#39;s an error, print // a notice and exist. if res.is_err() { ui.print(\u0026#34;Can\u0026#39;t goto: \u0026#34; + res.err_msg()) return nil } // If no error, unwrap the result object to get the result-set returned from the query. // Then change the current result-set to this one. This will change the result-set the // user is currently seeing. session.set_result_set(res.unwrap()) }) To load an extension script, use the load-script command:\nload-script script.tm The script must exist in the \u0026ldquo;script\u0026rdquo; directory, which by default is:\n$HOME/.config/audax/dynamo-browse/scripts "}]